generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  admin_id   String   @id @default(uuid()) @db.VarChar(36)
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Seller {
  seller_id      String   @id @default(uuid()) @db.VarChar(36)
  user_id        String   @unique @db.VarChar(36)
  shop_name      String   @db.VarChar(255)
  address_detail String   @db.VarChar(255)
  latitude       Float
  longitude      Float
  approved       Boolean
  activated      Boolean
  rating         Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user        User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  Transaction Transaction[]
  Rating      Rating[]
}

model User {
  user_id        String   @id @default(uuid()) @db.VarChar(36)
  fullname       String   @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  password       String   @db.VarChar(255)
  date_of_birth  DateTime
  address_detail String   @db.VarChar(255)
  latitude       Float
  longitude      Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  Seller      Seller?
  Cart        Cart[]
  Transaction Transaction[]
  Rating      Rating[]
}

model Product {
  product_id  String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  price       Float
  description String   @db.VarChar(1000)
  rating      Float
  stock       Int
  activated   Boolean
  deleted     Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  CartItem CartItem[]
  Rating   Rating[]
}

model Cart {
  cart_id    Int      @id @default(autoincrement())
  user_id    String   @db.VarChar(36)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  CartItem CartItem[]
}

model CartItem {
  cart_item_id Int      @id @default(autoincrement())
  cart_id      Int
  product_id   String   @db.VarChar(36)
  amount       Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  cart    Cart    @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade, onUpdate: Cascade)
}

model Transaction {
  transaction_id String   @id @default(uuid()) @db.VarChar(36)
  user_id        String   @db.VarChar(36)
  seller_id      String   @db.VarChar(36)
  status         Int
  address        String   @db.VarChar(255)
  subtotal       Float
  shipping       Float
  tax            Float
  fee            Float
  total          Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user   User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  seller Seller @relation(fields: [seller_id], references: [seller_id], onDelete: Cascade, onUpdate: Cascade)
}

model Rating {
  rating_id  Int      @id @default(autoincrement())
  user_id    String   @db.VarChar(36)
  rating     Int
  product_id String?  @db.VarChar(36)
  seller_id  String?  @db.VarChar(36)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  product Product? @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  seller  Seller?  @relation(fields: [seller_id], references: [seller_id], onDelete: Cascade, onUpdate: Cascade)
}
